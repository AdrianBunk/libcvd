AC_INIT(CVD,0.7)
AC_COPYRIGHT(Copyright foo)



orig_CXXFLAGS="$CXXFLAGS"

#Use builtin autoconf checks for all the programs we need.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX


#Switch testing language to C++
AC_LANG(C++)

###################################################
#
# Check for g++ version >= 3

if test x$GXX = xyes
then
	good_gcc=0

	AC_MSG_CHECKING([g++ version])
	changequote(,)
	gxx_major_version=`g++ -v 2>&1 | $AWK -F '[ .]' '/version/{print $3}'`
	changequote([,])


	if test "$gxx_major_version" -lt 3
	then
		AC_MSG_RESULT([$gxx_major_version (failed)])
		AC_MSG_CHECKING([for other possibilities for g++ version >= 3])
		AC_MSG_RESULT([])
		#Check for some other possible G++s
		#Uncache che checks
		unset CXX
		unset ac_ct_CXX
		unset ac_cv_prog_ac_ct_CXX 
		unset ac_cv_prog_cxx_g
		unset GXX
		unset ac_cv_cxx_compiler_gnu

		#echo is a dummy target, which will always succeed.
		#If the c++ compiler is set to echo, then we know that
		#none of the proper ones worked.
		AC_PROG_CXX([g++-4 g++-3 echo])

		if test $ac_cv_prog_ac_ct_CXX = echo
		then
			AC_MSG_ERROR([g++ version >= 3.0 is required.])
		fi
	else
		AC_MSG_RESULT([$gxx_major_version (ok)])
	fi


fi


AC_ARG_WITH(debug,   [  --without-debug           compile without debug support],[debug=no], [])
AC_ARG_WITH(debug,   [  --with-debug=flags        compile with debug support],[debug="$withval"], [])
AC_ARG_WITH(profile, [  --with-profile=flags      compile with profile support],[profile="$withval"], [profile=no])

###################################################
#
# Deal with profiling and debugging
#
#
if test "$debug" != no || test "$profile" != no
then
	if test "$debug" == ""
	then
		if test "$ac_cv_cxx_compiler_gnu" = yes
		then
			CXXFLAGS="$orig_CXXFLAGS -g -ggdb"
		fi
	else
		CXXFLAGS="$orig_CXXFLAGS $debug"
	fi
elif test "$debug" = no
then
	#Remove debugging
	CXXFLAGS="$orig_CXXFLAGS"
fi

if test "$profile" != no
then
	if test "$profile" = yes
	then
		if test "$ac_cv_cxx_compiler_gnu" = yes
		then
			CXXFLAGS="$CXXFLAGS -p -pg"
		else 
			AC_MSG_WARN([I don't know how to switch on profiling for this compiler])
		fi
	else
		CXXFLAGS="$CXXFLAGS $profile"
	fi
fi

##################################################
#
# Cpu type detection and optimization
#

#Host detection
AC_CANONICAL_HOST

#Custom host CPU detection
case "$host" in
	*86*linux*)
		cpu="`awk '
/Pentium III/						{print "p3";exit}
/Intel\(R\) Pentium\(R\) 4/			{print "p4";exit}
/Intel\(R\) Pentium\(R\) M/			{print "pM";exit}
/Intel\(R\) Xeon\(TM\)/				{print "xeon";exit}
/AMD Athlon\(tm\)/					{print "athlon";exit}
/AMD Opteron\(tm\)/					{print "opteron";exit}' /proc/cpuinfo`"

		#Check for instructions
		#Currently, we're mostly interested in what AMD call mmxext
		#(which are part of SSE). They include pshufw, movntq and prefetchnta
		AC_MSG_CHECKING([for MMX, SSE])
		if grep -q sse /proc/cpuinfo
		then
			AC_MSG_RESULT(yes)
			AC_SUBST(have_sse,yes)
			AC_SUBST(have_mmxext,yes)
			AC_DEFINE(CVD_HAVE_SSE)
			AC_DEFINE(CVD_HAVE_MMXEXT)
		else
			AC_MSG_RESULT(no)
		fi
		
		AC_MSG_CHECKING([for MMX, MMXEXT])
		if grep -q mmxext /proc/cpuinfo
		then
			AC_MSG_RESULT(yes)
			AC_SUBST(have_mmxext,yes)
			AC_DEFINE(CVD_HAVE_MMXEXT)
		else
			AC_MSG_RESULT(no)
		fi

		AC_MSG_CHECKING([for SSE2])
		if grep -q sse2 /proc/cpuinfo
		then
			AC_MSG_RESULT(yes)
			AC_SUBST(have_sse2,yes)
			AC_DEFINE(CVD_HAVE_SSE2)
		else
			AC_MSG_RESULT(no)
		fi
	
	;;
esac

if test "$cpu" == ""
then
	cpu=Unknown
fi


AC_ARG_WITH(optimize,   [  --without-optimize           compile without ],[optimize=no],[])
AC_ARG_WITH(optimize,   [  --with-optimize=flags        compile with optimization flags],[optimize="$withval"], [])

if test "$optimize" != no
then
	if test "$optimize" != ""
	then
		OFLAGS="$optimize"
	elif test "$ac_cv_cxx_compiler_gnu" = yes
	then
		AC_MSG_CHECKING([for best optimize flags])
		AC_MSG_RESULT([])
		
		#Find possible lest of compiler flags
		#FIXME, only GCC is currently supported
		cpuoptlist="`$AWK '/^'$cpu'/{$1=""; print}' make/march_flags`"
		
		#Test list in order to find the best compiler option
		save_CXXFLAGS="$CXXFLAGS"
		for i in $cpuoptlist
		do
			i="-march=$i"
			AC_MSG_CHECKING([$CXX supports $i]) 
			
			CXXFLAGS="$save_CXXFLAGS $i" 
			AC_COMPILE_IFELSE([int main(){}], [a=1], [a=0])

			if test $a = 1
			then
				AC_MSG_RESULT([yes])
				cpuopt=$i
				break
			else
				AC_MSG_RESULT([no])
			fi
		done
		CXXFLAGS="$save_CXXFLAGS"
		
		
		opt="-O3 $cpuopt"
		if test "$cpuopt" = ""
		then
			AC_MSG_WARN([I do not know what the best flags are for this processor.])
		fi
		OFLAGS="$opt"
	else
		AC_MSG_WARN([I do not know how to switch on optimizing for this compiler])
	fi
fi

AC_SUBST(OFLAGS,[$OFLAGS])

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB



AC_CONFIG_HEADERS
AC_HEADER_STDC

#From hereon, I use the following conventions:
#a variable, FOO is saves (for the purpose of testing additions to it) in
#save_FOO
#
#The variable `a' is used throughout as a temporary in tests


################################################################################
#
# Some notes on autoconf

#This if m4ese for a block comment :-)
changequote(<<,>>)
m4_if(<<

Quoting characters are [ and ]. There is no way to escape them, except by 
changing the quote character (see above). This is why I mostly use the 
shell construct:
if test foo

as opposed to 

if [ foo ]





AC_CHECK_LIB(library, function, success, failure)

Used to check for existence function a library. On success, it sets the
variable ac_cv_lib_library_function=yes (empty on failure). If the success
argument is missing of blank, eg:

AC_CHECK_LIB(library, function, [], [beep])

then the -llibrary is added to $LIBS automatically. Testing for the function
main is an easy way of checking that linking against a library works without
looking for a specific function.






AC_SUBST(a, b)

will substiture b for @a@ in a .in file, such as makefile.in



AC_DEFINE(a, b)

will make a #define a b. AC_DEFINE_UNQUOTED is needed if b is a shell expansion






>>)
changequote([,])

all_options="videodisplay jpeg tiff ffmpeg toon lapack"


################################################################################
#
#  Some of my own M4 macros
#


################################################################################
#
# An OSX specific hack to get at stuff in /sw automatically
# 

if test "$host_vendor" = apple
then
	CPPFLAGS="$CPPFLAGS -I /sw/include -I/usr/X11R6/include"
	LIBS="$LIBS -L/sw/lib"
	AC_MSG_NOTICE([Adding /sw to the build path.])
	AC_MSG_NOTICE([Adding /usr/X11R6/include to the build path.])
	AC_SUBST(osx_hacks,yes)
fi

################################################################################
#
#Check for numerics
#


echo 
echo -----------------------------
echo Checking for numerics support
echo -----------------------------




###################################################
#
#Allow the user to specify the location of TooN
#
AC_ARG_WITH(TooN, [ --with-TooN=directory  Specify location for TooN ], [opt_toon_dir=$withval])

if test "$opt_toon_dir" = no
then
	AC_MSG_ERROR("TooN is not optional. Use --with-TooN=dir to specify where it can be found.")
fi

#Yes is not a useful answer. We know the answer is yes.
if test "$opt_toon_dir" = yes
then
	opt_toon_dir=
fi

#Check for TooN
AC_MSG_CHECKING([for TooN])

#Check for TooN in a bunch of places
save_CPPFLAGS="$CPPLAGS"
toondir="Missing"
for dir in  $opt_toon_dir "" "$HOME/code/TooN" "$HOME/Src/TooN" "$HOME/usr/include" "../TooN" ".."
do
	a=
	if test "$dir" = ""
	then
		CPPFLAGS="$save_CPPLAGS"
	else
		CPPFLAGS="$save_CPPLAGS -I$dir"
	fi

	AC_COMPILE_IFELSE([#include <TooN/TooN.h>
int main(){TooN::Vector<2> v;return 0;}], [a=1]) 

	AC_COMPILE_IFELSE([#include <numerics.h>
int main(){Vector<2> v;return 0;}], [old_toon="$old_toon $dir"]) 
	
	if test x$a = x1
	then
		toondir=$dir
		break
	fi
done

AC_MSG_RESULT($toondir)

if test "$toondir" = Missing
then
	AC_MSG_WARN(TooN is missing. Numerics support disabled.)
	if test "$old_toon" != ""
	then
	AC_MSG_WARN(You have old versions of TooN installed in $old_toon. These are too old for libCVD.)
	fi
	toon=no
else
	options="$options toon"
	toon=yes
	AC_DEFINE(CVD_HAVE_TOON)
	AC_SUBST(have_toon,yes)
fi

##################################################
#
# Check for BLAS and LAPACK support
#
lapack=no

if test "$toon" = yes && test "$host_vendor" == apple
then
	
	save_LIBS="$LIBS"
	save_CPPFLAGS="$CPPFLAGS"
	CPPFLAGS="$CPPFLAGS -framework vecLib"
	LIBS="$LIBS -framework vecLib"


	AC_MSG_CHECKING(vecLib framework)
	a=0
	AC_COMPILE_IFELSE([#include <numerics.h>
#include <SVD.h>
int main(){Matrix<2> m;SVD<2> svdm(m);return 0;}], [a=1]) 

	if test x$a	= x1
	then
		AC_MSG_RESULT(yes)
		lapack=yes
		options="$options lapack"
	else
		AC_MSG_RESULT(no)
		LIBS="$save_LIBS"
		CPPFLAGS="$save_CPPFLAGS"
	fi
fi


if test "$toon" = yes && test "$lapack" = no
then

	#Check whether we need -lf2c or -lg2c
	f2c="Missing"
	AC_MSG_CHECKING([for C to fortran library])

	save_LIBS="$LIBS"

	#The linking testing function AC_LINK_IFELSE uses LIBS in the 
	#linking stage, so we communicate our requirements by using this
	LIBS="$save_LIBS -lf2c"
	AC_LINK_IFELSE([int main(){return 0;}], [f2c=f2c])

	LIBS="$save_LIBS -lg2c"
	AC_LINK_IFELSE([int main(){return 0;}], [f2c=g2c])


	AC_MSG_RESULT($f2c)


	if test "$f2c" = Missing 
	then
		AC_MSG_WARN(libg2c (or libf2c) is missing. I don't know how to link against Fortran.)
	else
		LIBS="$save_LIBS -l$f2c"

		#NB, the AC_CHECK_LIB function automatically sets up $LIBS so that it contains
		#the library just checked for. Which is quite handy.
		AC_CHECK_LIB(blas,  dgemm_)
		if test x$ac_cv_lib_blas_dgemm_ != xyes
		then
			AC_MSG_WARN(BLAS is missing. Get it from www.netlib.org/blas); 
		else
			AC_CHECK_LIB(lapack,  dgesvd_)
			if test x$ac_cv_lib_lapack_dgesvd_ != xyes
			then
				AC_MSG_WARN(LAPACK is missing. Get it from www.netlib.org/lapack); 
			else
				lapack=yes
			fi
		fi
	fi

	if test "$lapack" = no
	then
		LIBS="$save_LIBS"
	else
		options="$options lapack"
		AC_SUBST(have_lapack,yes)
		AC_DEFINE(CVD_HAVE_LAPACK)
	fi
	
fi



cvd_major=`echo $PACKAGE_VERSION | $AWK -F'\\\\.' '{print $1}'`
cvd_minor=`echo $PACKAGE_VERSION | $AWK -F'\\\\.' '{print $2}'`

AC_DEFINE_UNQUOTED(CVD_MAJOR_VERSION,$cvd_major)
AC_SUBST(major, $cvd_major)
AC_DEFINE_UNQUOTED(CVD_MINOR_VERSION,$cvd_minor)
AC_SUBST(minor, $cvd_minor)

################################################################################
#
#Check for optional libraries
#

echo
echo -------------------------------
echo Checking for optional libraries
echo -------------------------------


AC_PATH_X
echo "FIXME! check for OpenGL properly!"
if test "x$ac_cv_have_x" != x
then
	AC_DEFINE(CVD_HAVE_VIDEODISPLAY)
	options="$options videodisplay"
	AC_SUBST(have_videodisplay, yes)
	LIBS="-lX11 -lGL $LIBS"
	test -n "$x_libraries" && LIBS="-L$x_libraries $LIBS"
	test -n "$x_includes" && CPPFLAGS="$CPPFLAGS -I$x_includes"
fi

AC_ARG_WITH(tiff, [  --without-tiff       compile without TIFF support],[if test "$withval" = no; then disable_tiff=yes; else disable_tiff=no; fi])
if test "$disable_tiff" != yes 
then
	AC_CHECK_HEADERS(tiffio.h)
	AC_CHECK_LIB(tiff, TIFFReadRGBAImageOriented)

	if test "$ac_cv_header_tiffio_h" = yes && test "$ac_cv_lib_tiff_TIFFReadRGBAImageOriented" = yes
	then
		AC_DEFINE(CVD_IMAGE_HAVE_TIFF, [TIFF,])
		AC_SUBST(have_tiff,yes)
		options="$options tiff"
	fi
fi


AC_ARG_WITH(jpeg, [  --without-jpeg	  compile without JPEG support],[if test "$withval" = no; then disable_jpeg=yes; else disable_jpeg=no; fi])
if test "$disable_jpeg" != yes 
then
	AC_CHECK_HEADERS(jpeglib.h)
	AC_CHECK_LIB(jpeg, jpeg_destroy_decompress)
	if test "$ac_cv_header_jpeglib_h" = yes && test "$ac_cv_lib_jpeg_jpeg_destroy_decompress" = yes
	then
		AC_DEFINE(CVD_IMAGE_HAVE_JPEG, [JPEG,])
		AC_SUBST(have_jpeg,yes)
		options="$options jpeg"
	fi
fi


AC_ARG_WITH(ffmpeg, [  --without-ffmpeg	  compile without FFMPEG support],[if test "$withval" = no; then use_ffmpeg=no; else use_ffmpeg="$withval"; fi])
if test "$use_ffmpeg" != no
then
	save_LIBS="$LIBS"
	if test x"$use_ffmpeg" != x
	then 
		LIBS="$LIBS -L $use_ffmpeg"
	fi

	a=
	AC_CHECK_HEADERS(ffmpeg/avcodec.h ffmpeg/avformat.h, [], [break])
	AC_CHECK_LIB(avcodec, avcodec_open)
	AC_CHECK_LIB(avformat, av_open_input_file)
	AC_CHECK_LIB(avformat, av_read_frame) #only in >= 0.4.9
	if test "$ac_cv_lib_avcodec_avcodec_open$ac_cv_lib_avformat_av_open_input_file" = yesyes
	then
		if test "$ac_cv_lib_avformat_av_read_frame" = yes
		then
			AC_DEFINE(CVD_HAVE_FFMPEG)
			AC_SUBST(have_ffmpeg, yes)
			options="$options ffmpeg"
			save_LIBS="$LIBS"
		else
			echo "You have FFMPEG, but the version is too old. Version 0.4.9 or newer is required."
		fi
	fi

	LIBS="$save_LIBS"
fi


################################################################################
#
# platform specific options
echo
echo ---------------------------------------
echo Checking for platform specific features
echo ---------------------------------------

AC_C_BIGENDIAN

if test x$ac_cv_c_bigendian = xno
then
	AC_DEFINE(CVD_ARCH_LITTLE_ENDIAN)
else
	AC_DEFINE(CVD_ARCH_BIG_ENDIAN)
fi

case "$host" in
	*linux*)
		
		os_options="dvbuffer v4l2buffer v4l1buffer"
	
		AC_ARG_WITH(firewire, [  --without-firewire	  compile without firewire (dvbuffer) support],[if test "$withval" = no; then disable_firewire=yes; else disable_firewire=no; fi])
		if test "$disable_firewire" != yes 
		then
			a=
			AC_CHECK_HEADERS(libraw1394/raw1394.h libdc1394/dc1394_control.h, [], [a=1])
			AC_CHECK_LIB(raw1394, main,[],[a=1])
			AC_CHECK_LIB(dc1394_control, main,[],[a=1])
			
			if test x$a = x
			then
				AC_DEFINE(CVD_HAVE_DVBUFFER)
				AC_SUBST(have_dvbuffer, yes)
				options="$options dvbuffer"
			fi
		fi

		AC_ARG_WITH(v4l1, [  --without-v4l1	  compile without v4l1 support],[if test "$withval" = no; then disable_v4l1=yes; else disable_v4l1=no; fi])
		if test "$disable_v4l1" != yes 
		then
			a=
			AC_CHECK_HEADERS(linux/videodev.h, [a=1])
			if test "$a" = 1
			then
				
				AC_DEFINE(CVD_HAVE_V4L1BUFFER)
				AC_SUBST(have_v4l1buffer, yes)
				options="$options v4l1buffer"
			fi
		fi

		AC_ARG_WITH(v4l2, [  --without-v4l2	  compile without v4l2 support],[if test "$withval" = no; then disable_v4l2=yes; else disable_v4l2=no; fi])
		if test "$disable_v4l2" != yes 
		then
			a=no
			AC_LANG(C)
			AC_MSG_CHECKING(for v4l2)
			AC_COMPILE_IFELSE([	#include <sys/types.h>
								#include <linux/types.h>
								#include <linux/videodev.h>
								int main(){V4L2_PIX_FMT_GREY;return 0;}], [a=yes])
			
			AC_LANG(C++)
			AC_MSG_RESULT($a)
			if test "$a" = yes
			then
				AC_DEFINE(CVD_HAVE_V4L2BUFFER)
				AC_SUBST(have_v4l2buffer, yes)
				options="$options v4l2buffer"
			fi
		fi

		
		AC_MSG_CHECKING([kernel major number])
		kernel_major=[`uname -r | $AWK -F'[.-]' '{print $1}'`]
		AC_MSG_RESULT($kernel_major)
		AC_DEFINE_UNQUOTED(CVD_KERNEL_MAJOR,$kernel_major)
		
		AC_MSG_CHECKING([kernel minor number])
		kernel_minor=[`uname -r | $AWK -F'[.-]' '{print $2}'`]
		AC_MSG_RESULT($kernel_minor)
		AC_DEFINE_UNQUOTED(CVD_KERNEL_MINOR,$kernel_minor)

		
		AC_MSG_CHECKING([kernel release number])
		kernel_release=[`uname -r | $AWK -F'[.-]' '{print $3}'`]
		AC_MSG_RESULT($kernel_release)
		AC_DEFINE_UNQUOTED(CVD_KERNEL_RELEASE,$kernel_release)
	;;
	*sgi*)
		os_options = "O2buffer"
		AC_DEFINE(CVD_HAVE_O2UBFFER)
		AC_SUBST(have_o2buffer,yes)
	
		AC_ARG_WITH(o2buffer, [  --without-o2buffer	  compile without sgi video],[if test "$withval" = no; then disable_o2buffer=yes; else disable_o2buffer=no; fi])
		if test "$disable_o2buffer" != yes
		then
			echo "I hope all SGIs have stuff needed for O2buffer. Disable (--without-o2buffer) if I'm wrong."
			options="$options O2buffer"
		fi
	;;
esac

################################################################################
#
# Extra build options
echo
echo --------------------------------
echo Checking for extra build options
echo --------------------------------

AC_CHECK_PROG(docs, doxygen, docs, no)

if test "$cpu" == ""
then
	cpu=generic
fi

AC_SUBST(cpu,$cpu)


D_PROGS='progs/se3_exp             toon
		progs/se3_ln               toon                 
		progs/se3_pre_mul          toon                 
		progs/se3_post_mul         toon                 
		progs/se3_inv              toon                 
		progs/img_play             videodisplay         
		progs/img_play_bw          videodisplay         
		progs/img_play_deinterlace videodisplay         
		progs/video_play           videodisplay  ffmpeg 
		progs/video_play_bw        videodisplay  ffmpeg '
progs="`echo $options $D_PROGS | $AWK -v stub=progs -f make/prog_dependencies.awk`"
AC_SUBST(progs,$progs)


echo $options $D_PROGS > foo

T_PROGS='
test/diskbuffer2					videodisplay
test/dvbuffer_mono  				videodisplay dvbuffer
test/dvbuffer_yuvrgb  			videodisplay dvbuffer
test/test_images       			
test/v4l1buffer_mono  			videodisplay v4l1buffer
test/v4l2buffer					videodisplay v4l2buffer
test/dvbuffer_controls 			videodisplay dvbuffer 
test/dvbuffer_rgb   				videodisplay dvbuffer
test/o2buffer        			videodisplay o2buffer
test/v4l1buffer_bayer 			videodisplay v4l1buffer 
test/v4l1buffer_rgb  			videodisplay v4l1buffer '
testprogs="`echo $options $T_PROGS | $AWK -v stub=test -f make/prog_dependencies.awk`"
AC_SUBST(testprogs,$testprogs)

AC_OUTPUT(Makefile)


cat << FOO > cvd/config.h
#ifndef CVD_CONFIG_H
#define CVD_CONFIG_H
`cat confdefs.h | grep CVD_`
#endif
FOO


AC_SUBST(debug_options,$options)
all_opts="$all_options $os_options"
AC_SUBST(debug_all_options,"$all_opts")

echo 
echo Options:
echo $options
echo
echo Missing options for $host_os:
changequote(, )
echo $options $all_options $os_options |  $AWK 'BEGIN{RS=" "}{a[$1]++}END{for(i in a)if(a[i]==1)printf(i" "); print""}'
changequote([,])

echo
echo Programs
echo $progs | sed -e's!progs/!!g'
echo 
echo Debug:
echo LIBS="$LIBS"
echo CXXFLAGS="$CXXFLAGS"
echo CPPFLAGS="$CPPFLAGS"
echo OFLAGS="$OFLAGS"

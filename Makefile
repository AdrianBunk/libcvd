UNAME=$(shell uname)

NUMERICS=$(HOME)/code/TooN
FORCE_GCC=0

PREFIX=$(HOME)/usr/noarch
EXEC_PREFIX=$(HOME)/usr/arch/$(UNAME)



#Options: [blank] | full
OPTIMIZE=
#Options: 0 | 1 0 is broken!
DEBUG=1

MAJOR_VER=0
MINOR_VER=6


has_i686=$(shell uname -m | grep -q i686 && echo 1)

ifeq ($(UNAME),Linux)
	CXX=g++


	KERNEL_MAJOR=$(shell uname -r | awk -F'[.-]' '{print $$1}')
	KERNEL_MINOR=$(shell uname -r | awk -F'[.-]' '{print $$2}')
	KERNEL_RELEASE=$(shell uname -r | awk -F'[.-]' '{print $$3}')

	INCLUDE=
	WFLAGS=-Wall

	OFLAGS_full=-O3 -march=pentium3 -fexpensive-optimizations
	OFLAGS_2=-O
	DFLAGS_1= -g -ggdb -fno-inline
	DFLAGS_0= -DNDEBUG

	TESTLIB=-L /usr/X11R6/lib -lX11 -lGL -lraw1394 -ldc1394_control -ljpeg
	TESTLIB=-L /usr/X11R6/lib -lX11 -lGL -ljpeg

	MISCFLAGS=-fPIC -pthread -DKERNEL_MAJOR=$(KERNEL_MAJOR) -DKERNEL_MINOR=$(KERNEL_MINOR) -DKERNEL_RELEASE=$(KERNEL_RELEASE)


	AR = ar crv
endif

ifeq ($(UNAME),IRIX)
	ifeq ($(FORCE_GCC),1)
		CXX=g++
		INCLUDE=
		WFLAGS=-Wall

		OFLAGS_full=-O3 -mips4 -mcpu=r10000
		DFLAGS_1=-g -ggdb
		DFLAGS_0= -DNDEBUG

		MISCFLAGS=-fPIC -pthread 
	else
		CXX=CC
		INCLUDE=
		#1209: Controlling parameter is true (I use this a lot, eg from <limits>)
		#1506: Warning about implicit conversion. I use these a lot. 

		#1424: Template parameter not used in the argument types. (CC's headers)
		#3201: Parameter not referenced (CC's header files generate lots of these)
		#1110: Statement not reached. these are generated by CC's headers.
		WFLAGS=-fullwarn -woff 3201,1110,1424,1209,1506
		OFLAGS_full=-Ofast -r10000 -mips4
		DFLAGS_1=-g
		DFLAGS_0= -DNDEBUG
		MISCFLAGS=-KPIC -LANG:std
		AR=CC $(WFLAGS) -ar -o
	endif
	TESTLIB=-lX11 -lGL -ldmedia -lvl -ljpeg
endif

OFLAGS=$(OFLAGS_$(OPTIMIZE))
DFLAGS=$(DFLAGS_$(DEBUG))

CXX_FLAGS=$(CXXFLAGS) -I. -I $(NUMERICS) $(INCLUDE)  -I. $(DFLAGS) $(OFLAGS) $(WFLAGS) $(MISCFLAGS) -D$(UNAME)
CXX_FLAGS_no_opt=$(CXXFLAGS) -I. -I $(NUMERICS) $(INCLUDE)  -I. $(DFLAGS) $(WFLAGS) $(MISCFLAGS) -D$(UNAME)


################################################################################
#
# Object files


CVD_OBJS=	cvd_src/se3.o 								\
			cvd_src/so3.o 								\
			cvd_src/videodisplay.o	 					\
			cvd_src/cvd_timer.o 						\
			cvd_src/brezenham.o							\
			cvd_src/globlist.o							\
			cvd_src/diskbuffer2.o						\
			cvd_src/exceptions.o						\
			cvd_src/image_io.o							\
			

PNM_OBJS=  	pnm_src/instantiations.o					\
			pnm_src/pnm_grok.o							\
			pnm_src/jpeg.o

#OS specific object files
OBJS_Linux= cvd_src/Linux/dvbuffer.o cvd_src/Linux/v4l2buffer.o 
OBJS_IRIX=cvd_src/IRIX/O2buffer.o cvd_src/IRIX/sgi-video.o

#Arch specific object files
OBJS_arch=cvd_src/yuv411_to_stuff.o

ifeq ($(has_i686), 1)
	OBJS_arch=cvd_src/i686/yuv411_to_stuff_MMX.o
endif


OBJS=$(CVD_OBJS) $(PNM_OBJS) $(OBJS_$(UNAME)) $(OBJS_arch)

################################################################################
#
#
# Programs to be installed

################################################################################
#
# Required headers

HEADERS=cvd/arch.h cvd/version.h 


################################################################################
#
# Test programs
PROGS=progs/se3_exp progs/se3_ln  progs/se3_pre_mul progs/se3_post_mul

TEST_all= test/test_images.test 
TEST_Linux= test/v4l2buffer.test
#TEST_Linux= test/dvbuffer_mono.test test/dvbuffer_rgb.test test/dvbuffer_controls.test test/diskbuffer2.test test/rawdcvideo_yuv_to_rgb.test test/rawdcvideo_yuv_to_y.test test/dvbuffer_yuvrgb.test test/v4l2buffer.test
TEST_IRIX=test/o2buffer.test

TEST= $(TEST_all) $(TEST_$(UNAME))


LIBMAJ=libcvd.so.$(MAJOR_VER)
LIBMIN=$(LIBMAJ).$(MINOR_VER)


libcvd.a: configuration $(OBJS)
	$(AR) libcvd.a $(OBJS)

libcvd.so: libcvd.a
	echo ********** ERROR! **********************
	echo *ERROR* this breaks exceptions!!!!!!!!
	foofoofoof
	ld -shared -soname $@ -o $(LIBMIN) -lc $(OBJS)
	#strip $(LIBMIN)
	rm -f $(LIBMAJ)
	ln -s $(LIBMIN) $(LIBMAJ)
	rm -f libcvd.so
	ln -s $(LIBMIN) libcvd.so
	echo ********** ERROR! **********************


testprogs:$(TEST)
test:testprogs
	mkdir -p testout/foo
	echo "**** TESTING image loading and saving:"
	test/test_images.test test/images/*.p?m test/images/*.jpg # > test_images.out.tmp
	echo "**** Converting to 8 bit (so xv will work for us...)"
	ls testout/*.pnm | sed -e's!testout/\(.*\)!pnmdepth 255 "&" > "testout/foo/\1"!' | sh
	echo "**** Check if images are OK:"
	echo "**** Warning: some versions od pnmdepth break on 16 bit files!"
	xv testout/foo/*

	echo "**** TESTING video i/o: press a key to exit"
	#test/videoprog.test

	echo "**** All OK"


install: libcvd.a $(PROGS)
	cp -r cvd $(PREFIX)/include/
	#cp -r pnm $(PREFIX)/include/
	cp libcvd.a $(EXEC_PREFIX)/lib/
	cp $(PROGS) $(EXEC_PREFIX)/bin/

cvd/arch.h: util/make_pnm_arch_h.util
	util/make_pnm_arch_h.util > cvd/arch.h

cvd/version.h:
	echo "#ifndef __CVD_VERSION_H" > cvd/version.h
	echo "#define __CVD_VERSION_H" >> cvd/version.h
	echo "  #define CVD_MAJOR_VERSION $(MAJOR_VER)" >> cvd/version.h
	echo "  #define CVD_MINOR_VERSION $(MINOR_VER)" >> cvd/version.h
	echo "#endif" >>cvd/version.h

configuration: cvd/arch.h
	/bin/echo -e "CVD version $(MAJOR_VER).$(MINOR_VER)\n" > configuration
	/bin/echo -e "Platform: $(UNAME)" >> configuration
	/bin/echo -e "Compiler: $(CXX)"   >> configuration
	/bin/echo -e "Debug level: $(DEBUG)   (DFLAGS=$(DFLAGS))" >> configuration
	/bin/echo -e "Optimize: $(OPTIMIZE) (OFLAGS=$(OFLAGS))" >> configuration
	/bin/echo -n "Kernel version flags: " >> configuration
	/bin/echo -e 'KERNEL_MAJOR=$(KERNEL_MAJOR) KERNEL_MINOR=$(KERNEL_MINOR) KERNEL_RELEASE=$(KERNEL_RELEASE)' >> configuration
	/bin/echo -n "Arch specific stuff: " >> configuration
	awk -vORS=" " '!/PNM/{print $$2}' cvd/arch.h 			>> configuration
	/bin/echo -e "has_i686=$(has_i686)\n" >> configuration


progs: libcvd.a $(PROGS)

progs/se3_exp: progs/se3_exp.o
	$(CXX) $^ -o $@ $(OFLAGS) -L. -lcvd

progs/se3_ln: progs/se3_ln.o
	$(CXX) $^ -o $@ $(OFLAGS) -L. -lcvd

progs/se3_pre_mul: progs/se3_pre_mul.o
	$(CXX) $^ -o $@ $(OFLAGS) -L. -lcvd

progs/se3_post_mul: progs/se3_post_mul.o
	$(CXX) $^ -o $@ $(OFLAGS) -L. -lcvd

	
clean: 
	rm -f libcvd.a
	rm -f libcvd.s*
	find . -name '*.o' | xargs rm -f
	find . -name '*.test' | xargs rm -f
	find . -name '*.util' | xargs rm -f
	rm -f cvd/arch.h cvd/version.h
	find . -name 'ii_files' | xargs rm -rf
	rm -rf testout tmp *.tmp
	rm -f configuration
	rm -f cvd/version.h




################################################################################
#
# Generic rules
.SUFFIXES:
.SUFFIXES: .cc .C .o .cxx .test .util


.cxx.util:
	$(CXX) -o  $@ -L.  $(CXX_FLAGS) $< $(UTILLIB)

%.test: %.C libcvd.a
	$(CXX) -o $@ -L.  $(CXX_FLAGS_no_opt)  $< -lcvd $(TESTLIB) -lm

%.test: %.cxx libcvd.a
	$(CXX) -o $@ -L.  $(CXX_FLAGS) $< -lcvd $(TESTLIB) -lm

%.o :  %.cc $(HEADERS)
	$(CXX) -o $@ -c $(CXX_FLAGS) $< 

%.o :  %.cxx $(HEADERS)
	$(CXX) -o $@ -c $(CXX_FLAGS) $<  

#These have asm in them. Do not optimize.
%.o :  %.C $(HEADERS)
	$(CXX) -o $@ -c $(CXX_FLAGS_no_opt) $< 

